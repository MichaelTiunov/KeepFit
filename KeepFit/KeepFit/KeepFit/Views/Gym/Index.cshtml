@model KeepFit.Models.GymModel

@{
    ViewBag.Title = "title";
    Layout = "~/Views/Shared/_LayoutRightSideBar.cshtml";
}
@section styles
{
    <meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
    <style type="text/css">
        #map-canvas {
            height: 500px;
            width: 800px;
        }
    </style>
}
@section scripts
{
    <script src="http://api-maps.yandex.ru/2.0/?load=package.full&lang=ru-RU" type="text/javascript"></script>
    <script>
        var myMap,
            myPlacemark,
            circle,
            objects=[],
            cafe, metro,
            gyms = [],
            gyms = @Html.Raw(Json.Encode(Model.Gyms));

            // Дождёмся загрузки API и готовности DOM.
            ymaps.ready(init);

            function init() {
                // Создание экземпляра карты и его привязка к контейнеру с
                // заданным id ("map").
                myMap = new ymaps.Map('map', {
                    // При инициализации карты обязательно нужно указать
                    // её центр и коэффициент масштабирования.
                    center: [53.9, 27.56], // Москва
                    zoom: 12
                });
                myMap.controls
                    .add('zoomControl', { left: 5, top: 5 });

                $.each(gyms, function(index, value) {
                    var gym = new ymaps.Placemark([value.Latitude, value.Longitude], {
                        // Свойства.
                        // Содержимое иконки, балуна и хинта.
                        iconContent: value.Name,
                        balloonContent: value.Name,
                        hintContent: 'Стандартный значок метки'
                    }, {
                        // Опции.
                        // Стандартная фиолетовая иконка.
                        preset: 'twirl#violetStretchyIcon'
                    });
                    myMap.geoObjects
                     .add(gym);
                    gyms.push(gym);
                });

                myMap.events.add('click', mapClick);
                
                function findClosestObjects () {
                    // Найдем в выборке кафе, ближайшее к найденной станции метро,
                    // и откроем его балун.
                    

                    cafe.getClosestTo(metro.get(0)).balloon.open();
        
                    // Будем открывать балун кафе, который ближе всего к месту клика
                    myMap.events.add('click', function (event) {
                        cafe.getClosestTo(event.get('coordPosition')).balloon.open();
                    });
                }
                
                function getAllAddresses() {
                    var objectsInsideCircle = ymaps.geoQuery(myMap.geoObjects).searchInside(circle),
                        html = "";
                    objectsInsideCircle.each(function(v) {
                        html += v.geometry.getCoordinates() + " | ";
                    });
                    $('#address').text(html);
                }

                function mapClick(e) {
                    var coords = e.get('coords');

                    // Если метка уже создана – просто передвигаем ее
                    if (myPlacemark) {
                        myPlacemark.geometry.setCoordinates(coords);
                    }
                        // Если нет – создаем.
                    else {
                        myPlacemark = createPlacemark(coords);
                        myMap.geoObjects.add(myPlacemark);
                        // Слушаем событие окончания перетаскивания на метке.
                        myPlacemark.events.add('dragend', function() {
                            getAddress(myPlacemark.geometry.getCoordinates());
                        });
                    }
                    getAddress(coords);
                }

                function findGyms(e) {
                    // Объекты, попадающие в круг, будут становиться красными.
                    var gymPosition = ymaps.geoQuery(myMap.geoObjects);
                    var objectsInsideCircle = gymPosition.searchInside(e);
                    objectsInsideCircle.setOptions('preset', 'twirl#redIcon');
                    // Оставшиеся объекты - синими.
                    gymPosition.remove(objectsInsideCircle).setOptions('preset', 'twirl#blueIcon');

                    gymPosition.getClosestTo(e).balloon.open();
                }

                function createPlacemark(coords) {
                    return new ymaps.Placemark(coords, {
                        iconContent: 'поиск...'
                    }, {
                        preset: 'twirl#violetStretchyIcon',
                        draggable: true
                    });
                }

                // Определяем адрес по координатам (обратное геокодирование)

                function getAddress(coords) {
                    myPlacemark.properties.set('iconContent', 'поиск...');
                    ymaps.geocode(coords).then(function(res) {
                        var firstGeoObject = res.geoObjects.get(0);

                        myPlacemark.properties
                            .set({
                                iconContent: firstGeoObject.properties.get('name'),
                                balloonContent: firstGeoObject.properties.get('text')
                            });
                        $('.currentAddress').val(firstGeoObject.properties.get('text'));

                        var lat = res.metaData.geocoder.request.split(',')[0],
                            long = res.metaData.geocoder.request.split(',')[1];
                        $('.currentAddressPositionLat').val(lat);
                        $('.currentAddressPositionLong').val(long);
                    });
                }

                function findLocation(name, circleRadius) {
                    // Поиск координат центра Нижнего Новгорода.
                    ymaps.geocode(name, {
                        /**
                         * Опции запроса
                 */
                        // boundedBy: myMap.getBounds(), // Сортировка результатов от центра окна карты
                        // strictBounds: true, // Вместе с опцией boundedBy будет искать строго внутри области, указанной в boundedBy
                        results: 1 // Если нужен только один результат, экономим трафик пользователей
                    }).then(function(res) {
                        // Выбираем первый результат геокодирования.
                        var firstGeoObject = res.geoObjects.get(0),
                            // Координаты геообъекта.
                            coords = firstGeoObject.geometry.getCoordinates(),
                            // Область видимости геообъекта.
                            bounds = firstGeoObject.properties.get('boundedBy');

                        myMap.geoObjects.each(function(i) {
                            if (i.geometry.getType() === 'Circle' && i.geometry.getRadius() === circleRadius)
                                myMap.geoObjects.remove(i);
                        });

                        circle = new ymaps.Circle([coords, circleRadius || 1000], null, { draggable: true });

                        //circle.events.add('drag', dragCircle);

                        circle.events.add('click', mapClick);

                        myMap.geoObjects.add(circle);

                        findGyms(circle);

                        // Добавляем первый найденный геообъект на карту.
                        myMap.geoObjects.add(firstGeoObject);
                        // Масштабируем карту на область видимости геообъекта.
                        myMap.setBounds(bounds, {
                            checkZoomRange: true // проверяем наличие тайлов на данном масштабе.
                        });
                    });
                }

                $('.findAddress').bind('click', function() {
                    findLocation($('#addressToAdd').val(),$("#spinner").val());
                });
                $('.getAllAddresses').bind('click', function() {
                    getAllAddresses();
                });
                $('.addAddress').bind('click', function() {
                    findLocation($('#livingAddress').val(),$("#spinner").val());
                });
            }

            $(function() {
                var spinner = $("#spinner").spinner();

                $('.addGymToMap').bind('click', function () {
                    var gym = {
                        name: $('.gymName').val(),
                        latitude: $('.currentAddressPositionLat').val(),
                        longitude: $('.currentAddressPositionLong').val()
                    };
                    $.ajax('@Url.Action("AddGym")', {
                        contentType: "application/json; charset=utf-8",
                        dataType: "json",
                        type: 'POST',
                        data: JSON.stringify(gym)
                    });
                });
            });
    </script>


}

@section RightContent
{
    <input class="currentAddress" type="text" style="width: 700px;">
    <input class="currentAddressPositionLat" type="text" style="width: 300px;">
    <input class="currentAddressPositionLong" type="text" style="width: 300px;">

    <div id="map" style="width: 700px; height: 500px"></div>

    <div id="content">
        <input type="text" class="gymName" style="width: 200px;" />
        <a class="button addGymToMap" href="javascript:void(0);">Add Gym</a>
    </div>
}

@section RightSidebar
{
    <input id="addressToAdd" type="text" style="width: 300px;">
    <a class="findAddress button addMarker" href="javascript:void(0);">Add marker</a>

    <a class="getAllAddresses button" href="javascript:void(0);">Get All Addresses</a>

    <input id="livingAddress" type="text" style="width: 300px;">

    <input id="spinner" name="value">

    <a class="addAddress button" href="javascript:void(0);">Add address</a>
}
